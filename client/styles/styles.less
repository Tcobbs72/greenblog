html{
  background-color: #E5E4D7;
}

body{
  width: 100vw;
}

.app-container{
  background-color: white;
  position: absolute;
  width: 90%;
  left: 5%;
  top: 5%;
}

.main-container{
  padding: 15px 15px 15px 15px;
}

h1, h2, h3, h4, h5, h6{
  margin: 0;
}

h6{
  font-size: 1em;
}

h5{
  font-size: 1.2em;
}

h4{
  font-size: 1.4em;
}

h3{
  font-size: 1.6em;
}

h2{
  font-size: 1.8em;
}

h1{
  font-size: 2em;
}

input, textarea{
  max-width: 100%;
}

*{
  word-wrap: break-word;
}

.invalid{
  border: 2px solid #b6332c;
}

/*general styles for all CSS Checkboxes*/
label {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

input[type=checkbox].css-checkbox {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height:1px;
  width:1px;
  margin:-1px;
  padding:0;
  border:0;
}

input[type=checkbox].css-checkbox + label.css-label {
  padding-left:20px;
  height:15px;
  display:inline-block;
  line-height:15px;
  background-repeat:no-repeat;
  background-position: 0 0;
  font-size:15px;
  vertical-align:middle;
  cursor:pointer;
}

input[type=checkbox].css-checkbox:checked + label.css-label {
  background-position: 0 -15px;
}

.css-label{
  background-image:url(http://csscheckbox.com/checkboxes/dark-check-green.png);
}

/*specific classes related to Checkbox skins*/

.lite-green-check{background-image:url(http://csscheckbox.com/checkboxes/lite-green-check.png);}
.lite-blue-check{background-image:url(http://csscheckbox.com/checkboxes/lite-blue-check.png);}
.lite-gray-check{background-image:url(http://csscheckbox.com/checkboxes/lite-gray-check.png);}
.lite-cyan-check{background-image:url(http://csscheckbox.com/checkboxes/lite-cyan-check.png);}
.lite-orange-check{background-image:url(http://csscheckbox.com/checkboxes/lite-orange-check.png);}
.lite-red-check{background-image:url(http://csscheckbox.com/checkboxes/lite-red-check.png);}

.lite-x-cyan{background-image:url(http://csscheckbox.com/checkboxes/lite-x-cyan.png);}
.lite-x-gray{background-image:url(http://csscheckbox.com/checkboxes/lite-x-gray.png);}
.lite-x-blue{background-image:url(http://csscheckbox.com/checkboxes/lite-x-blue.png);}
.lite-x-orange{background-image:url(http://csscheckbox.com/checkboxes/lite-x-orange.png);}
.lite-x-red{background-image:url(http://csscheckbox.com/checkboxes/lite-x-red.png);}
.lite-x-green{background-image:url(http://csscheckbox.com/checkboxes/lite-x-green.png);}

.mac-style{background-image:url(http://csscheckbox.com/checkboxes/mac-style.png);}
.mario-style{background-image:url(http://csscheckbox.com/checkboxes/mario-style.png);}
.alert-style{background-image:url(http://csscheckbox.com/checkboxes/alert-style.png);}
.lite-plus{background-image:url(http://csscheckbox.com/checkboxes/lite-plus.png);}
.dark-plus{background-image:url(http://csscheckbox.com/checkboxes/dark-plus.png);}
.dark-plus-cyan{background-image:url(http://csscheckbox.com/checkboxes/dark-plus-cyan.png);}
.dark-plus-orange{background-image:url(http://csscheckbox.com/checkboxes/dark-plus-orange.png);}
.dark-check-cyan{background-image:url(http://csscheckbox.com/checkboxes/dark-check-cyan.png);}
.dark-check-green{background-image:url(http://csscheckbox.com/checkboxes/dark-check-green.png);}
.dark-check-orange{background-image:url(http://csscheckbox.com/checkboxes/dark-check-orange.png);}


.depressed-lite-small{background-image:url(http://csscheckbox.com/checkboxes/depressed-lite-small.png);}
.elegant{background-image:url(http://csscheckbox.com/checkboxes/elegant.png);}
.depressed{background-image:url(http://csscheckbox.com/checkboxes/depressed.png);}
.chrome-style{background-image:url(http://csscheckbox.com/checkboxes/chrome-style.png);}
.web-two-style{background-image:url(http://csscheckbox.com/checkboxes/web-two-style.png);}
.vlad{background-image:url(http://csscheckbox.com/checkboxes/vlad.png);}
.klaus{background-image:url(http://csscheckbox.com/checkboxes/klaus.png);}

input[type=checkbox].css-checkbox.med + label.css-label.med {
  padding-left:22px;
  height:17px;
  display:inline-block;
  line-height:17px;
  background-repeat:no-repeat;
  background-position: 0 0;
  font-size:15px;
  vertical-align:middle;
  cursor:pointer;
}

input[type=checkbox].css-checkbox.med:checked + label.css-label.med {

  background-position: 0 -17px;
}
input[type=checkbox].css-checkbox.sme + label.css-label.sme {
  padding-left:22px;
  height:16px;
  display:inline-block;
  line-height:16px;
  background-repeat:no-repeat;
  background-position: 0 0;
  font-size:15px;
  vertical-align:middle;
  cursor:pointer;
}

input[type=checkbox].css-checkbox.sme:checked + label.css-label.sme{

  background-position: 0 -16px;
}
input[type=checkbox].css-checkbox.lrg + label.css-label.lrg {
  padding-left:22px;
  height:20px;
  display:inline-block;
  line-height:20px;
  background-repeat:no-repeat;
  background-position: 0 0;
  font-size:15px;
  vertical-align:middle;
  cursor:pointer;
}

input[type=checkbox].css-checkbox.lrg:checked + label.css-label.lrg{

  background-position: 0 -20px;
}

.btn-unstyled{
  background: transparent;
}

.border-left{
  padding-left: 1.2rem;
  border-left: 2px solid #92CD00;
}
.border-right{
  padding-right: 1.3rem;
  border-right: 2px solid #92CD00;
}

// variables

//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.
@screen-xxs:                 300px;
@screen-xxs-min:              @screen-xxs;
@screen-small-phone:          @screen-xxs-min;

// Extra small screen / phone
// Note: Deprecated @screen-xs and @screen-phone as of v3.0.1
@screen-xs:                  480px;
@screen-xs-min:              @screen-xs;
@screen-phone:               @screen-xs-min;

// Small screen / tablet
// Note: Deprecated @screen-sm and @screen-tablet as of v3.0.1
@screen-sm:                  769px; /* [CGN] 768px */  /*--Also changed the visiblity class within the less-bootstrap-3/less/utilities.import.less */
@screen-sm-min:              @screen-sm;
@screen-tablet:              @screen-sm-min;

// Medium screen / desktop
// Note: Deprecated @screen-md and @screen-desktop as of v3.0.1
@screen-md:                  992px;
@screen-md-min:              @screen-md;
@screen-desktop:             @screen-md-min;

// Large screen / wide desktop
// Note: Deprecated @screen-lg and @screen-lg-desktop as of v3.0.1
@screen-lg:                  1200px;
@screen-lg-min:              @screen-lg;
@screen-lg-desktop:          @screen-lg-min;

// So media queries don't overlap when required, provide a maximum
@screen-xxs-max:              (@screen-xs-min - 1);
@screen-xs-max:              (@screen-sm-min - 1);
@screen-sm-max:              (@screen-md-min - 1);
@screen-md-max:              (@screen-lg-min - 1);


//== Grid system
//
//## Define your custom responsive grid.

//** Number of columns in the grid.
@grid-columns:              36; /* [CGN]  12 */
//** Padding between columns. Gets divided in half for the left and right.
@grid-gutter-width:         5px; /* [CGN] 30px */
// Navbar collapse
//** Point at which the navbar becomes uncollapsed.
@grid-float-breakpoint:     @screen-sm-min;
//** Point at which the navbar begins collapsing.
@grid-float-breakpoint-max: (@grid-float-breakpoint - 1);

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.

.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-xxs-@{index}, .col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
    @item: ~".col-xxs-@{index}, .col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      min-height: 1px;
      // Inner gutter via padding
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
    }
  }
  .col(1); // kickstart it
}

.float-grid-columns(@class) {
  .col(@index) when (@index = 1) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1); // kickstart it
}

.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    width: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type);
}

// Create grid for specific class
.make-grid(@class) {
  .float-grid-columns(@class);
  .loop-grid-columns(@grid-columns, @class, width);
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}


//
// Grid system
// --------------------------------------------------


// Container widths
//
// Set the container width, and override it for fixed navbars in medi

// Columns
//
// Common styles for small and large grid columns

.make-grid-columns();

@media (min-width: @screen-xxs-min) {
  .make-grid(xxs);
  body{font-size: 10px;}
}


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@media (min-width: @screen-xs-min) {
  .make-grid(xs);
  body{font-size: 15px;}
}


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: @screen-sm-min) {
  .make-grid(sm);
  body{font-size: 20px;}
}


// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: @screen-md-min) {
  .make-grid(md);
  body{font-size: 25px;}
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: @screen-lg-min) {
  .make-grid(lg);
  body{font-size: 30px;}
}